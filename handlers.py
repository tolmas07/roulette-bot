from telegram import Update
from telegram.ext import ContextTypes
from config import ADMIN_IDS, ROULETTE_GIF
import asyncio

class Handlers:
    def __init__(self, db, game):
        self.db = db
        self.game = game
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.username or ""
        text = update.message.text.lower().strip()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = self.db.get_balance(user_id)
        self.db.update_username(user_id, username)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        if text == "–±–∞–ª–∞–Ω—Å":
            await self.show_balance(update, user_id, username)
            return
        
        elif text == "–∏—Å—Ç–æ—Ä–∏—è":
            await self.show_history(update, user_id, username)
            return
        
        elif text == "–∫—Ä—É—Ç–∏—Ç—å":
            await self.spin_roulette(update, user_id, username)
            return
        
        elif text == "–ø–æ–º–æ—â—å":
            await self.show_help(update, user_id, username)
            return
        
        elif text == "–≤—Å–µ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" and user_id in ADMIN_IDS:
            await self.admin_all_users(update)
            return
        
        elif text.startswith("–∏–∑–º–µ–Ω–∏—Ç—å–±–∞–ª–∞–Ω—Å") and user_id in ADMIN_IDS:
            await self.admin_set_balance(update, text)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫ (—á–∏—Å–ª–æ + —Ç–µ–∫—Å—Ç)
        parts = text.split()
        if len(parts) < 2:
            return
        
        try:
            bet_amount = int(parts[0])
            bet_type_str = parts[1]
        except:
            return
        
        if bet_amount > balance:
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.\n"
                "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É: @tolmas_prvt"
            )
            return
        
        bet_type_map = {
            "–∫": "red", "–∫—Ä–∞—Å–Ω—ã–π": "red", "–∫—Ä–∞—Å": "red",
            "—á": "black", "—á–µ—Ä–Ω—ã–π": "black", "—á–µ—Ä": "black", 
            "–∑": "green", "–∑–µ—Ä–æ": "green", "0": "green",
            "—á–µ—Ç": "even", "—á–µ—Ç–Ω–æ–µ": "even",
            "–Ω–µ—á–µ—Ç": "odd", "–Ω–µ—á–µ—Ç–Ω–æ–µ": "odd", "–Ω": "odd"
        }
        
        if bet_type_str.isdigit():
            bet_type = "number"
            bet_value = bet_type_str
        else:
            bet_type = bet_type_map.get(bet_type_str)
            bet_value = None
        
        if not bet_type:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        self.db.set_active_bet(user_id, bet_amount, bet_type, bet_value)
        
        bet_type_display = {
            "red": "üî¥ –ö—Ä–∞—Å–Ω—ã–π",
            "black": "‚ö´ –ß–µ—Ä–Ω—ã–π", 
            "green": "üü¢ –ó–µ—Ä–æ",
            "even": "üîµ –ß–µ—Ç–Ω–æ–µ",
            "odd": "üü° –ù–µ—á–µ—Ç–Ω–æ–µ",
            "number": f"üî¢ –ß–∏—Å–ª–æ {bet_value}"
        }.get(bet_type, bet_type)
        
        await update.message.reply_text(
            f"‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n"
            f"üíé –°—É–º–º–∞: {bet_amount}‚Çø\n"
            f"üéØ –¢–∏–ø: {bet_type_display}\n\n"
            f"–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä—É–ª–µ—Ç–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: –∫—Ä—É—Ç–∏—Ç—å"
        )
    
    async def show_balance(self, update: Update, user_id: int, username: str):
        balance = self.db.get_balance(user_id)
        self.db.update_username(user_id, username)
        await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚Çø")
    
    async def show_history(self, update: Update, user_id: int, username: str):
        self.db.update_username(user_id, username)
        
        history = self.db.get_game_history(user_id, 10)
        if not history:
            await update.message.reply_text("üìù –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø—É—Å—Ç–∞")
            return
        
        history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä:\n\n"
        for winning_number, in history:
            color = "üü¢ –ó–µ—Ä–æ" if winning_number in self.game.green else \
                   "üî¥ –ö—Ä–∞—Å–Ω—ã–π" if winning_number in self.game.red else "‚ö´ –ß–µ—Ä–Ω—ã–π"
            history_text += f"{color} - {winning_number}\n"
        
        await update.message.reply_text(history_text)
    
    async def spin_roulette(self, update: Update, user_id: int, username: str):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç–∞–≤–∫—É
        active_bet = self.db.get_active_bet(user_id)
        if not active_bet:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É! –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´100 –∫¬ª")
            return
        
        bet_amount, bet_type, bet_value = active_bet
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF –Ω–∞ 6 —Å–µ–∫—É–Ω–¥
        message = await update.message.reply_animation(
            animation=ROULETTE_GIF,
            caption="üé∞ –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É..."
        )
        
        # –ñ–¥–µ–º 6 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(6)
        
        # –£–¥–∞–ª—è–µ–º GIF
        await message.delete()
        
        # –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É
        winning_number = self.game.spin()
        win_amount = self.game.calculate_win(bet_type, bet_amount, winning_number, bet_value)
        balance = self.db.get_balance(user_id)
        new_balance = balance - bet_amount + win_amount
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é
        self.db.update_balance(user_id, new_balance)
        self.db.add_game_history(user_id, username, bet_amount, winning_number, win_amount)
        self.db.clear_active_bet(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç
        color = "üü¢ –ó–ï–õ–ï–ù–´–ô" if winning_number in self.game.green else \
               "üî¥ –ö–†–ê–°–ù–´–ô" if winning_number in self.game.red else "‚ö´ –ß–ï–†–ù–´–ô"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–±–µ–∑ –±–∞–ª–∞–Ω—Å–∞)
        result_text = (
            f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {winning_number} {color}\n"
            f"üë§ –ò–≥—Ä–æ–∫: {username}\n"
            f"üíé –°—Ç–∞–≤–∫–∞: {bet_amount}‚Çø\n"
            f"üí∞ –í—ã–∏–≥—Ä—ã—à: {win_amount}‚Çø"
        )
        
        await update.message.reply_text(result_text)
    
    async def show_help(self, update: Update, user_id: int, username: str):
        self.db.update_username(user_id, username)
        
        help_text = (
            "üé∞ –ò–ì–†–ê –í –†–£–õ–ï–¢–ö–£\n\n"
            "üí¨ –ö–∞–∫ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏:\n"
            "‚Ä¢ ¬´100 –∫¬ª - 100 –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π (x2)\n"
            "‚Ä¢ ¬´50 —á¬ª - 50 –Ω–∞ —á–µ—Ä–Ω—ã–π (x2)\n"
            "‚Ä¢ ¬´25 –∑¬ª - 25 –Ω–∞ –∑–µ—Ä–æ (x36)\n"
            "‚Ä¢ ¬´10 7¬ª - 10 –Ω–∞ —á–∏—Å–ª–æ 7 (x36)\n"
            "‚Ä¢ ¬´100 —á–µ—Ç¬ª - 100 –Ω–∞ —á–µ—Ç (x2)\n"
            "‚Ä¢ ¬´100 –Ω–µ—á–µ—Ç¬ª - 100 –Ω–∞ –Ω–µ—á–µ—Ç (x2)\n\n"
            "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ –±–∞–ª–∞–Ω—Å - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
            "‚Ä¢ –∏—Å—Ç–æ—Ä–∏—è - –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä\n"
            "‚Ä¢ –∫—Ä—É—Ç–∏—Ç—å - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É\n"
            "‚Ä¢ –ø–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é\n\n"
            "üéØ –ü–æ—Ä—è–¥–æ–∫ –∏–≥—Ä—ã:\n"
            "1. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∫)\n"
            "2. –ù–∞–ø–∏—à–∏—Ç–µ: –∫—Ä—É—Ç–∏—Ç—å\n"
            "3. –°–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
            "‚ùì –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö:\n"
            "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É: @tolmas_prvt"
        )
        
        await update.message.reply_text(help_text)
    
    # –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
    async def admin_all_users(self, update: Update):
        all_users = self.db.get_all_users()
        if not all_users:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        users_text = "üìä –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for user_id, balance, username in all_users:
            username_display = f"@{username}" if username else "–ë–µ–∑ username"
            users_text += f"ID: {user_id} | {username_display}: {balance}‚Çø\n"
        
        await update.message.reply_text(users_text)
    
    async def admin_set_balance(self, update: Update, text: str):
        try:
            parts = text.split()
            if len(parts) < 3:
                await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –∏–∑–º–µ–Ω–∏—Ç—å–±–∞–ª–∞–Ω—Å @username 1000\n–ò–ª–∏: –∏–∑–º–µ–Ω–∏—Ç—å–±–∞–ª–∞–Ω—Å 123456789 1000")
                return
            
            target = parts[1].replace('@', '')
            new_balance = int(parts[2])
            
            all_users = self.db.get_all_users()
            target_user_id = None
            
            # –ü–æ–∏—Å–∫ –ø–æ username
            for user_id, balance, db_username in all_users:
                if db_username and db_username.lower() == target.lower():
                    target_user_id = user_id
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ username, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ ID
            if not target_user_id and target.isdigit():
                target_user_id = int(target)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                user_exists = any(user_id == target_user_id for user_id, balance, username in all_users)
                if not user_exists:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                    self.db.get_balance(target_user_id)  # –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    target_user_id = int(target)
            
            if not target_user_id:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            self.db.set_balance(target_user_id, new_balance)
            await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_balance}‚Çø")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")